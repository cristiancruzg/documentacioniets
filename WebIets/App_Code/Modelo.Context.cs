//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó a partir de una plantilla.
//
//     Los cambios manuales en este archivo pueden causar un comportamiento inesperado de la aplicación.
//     Los cambios manuales en este archivo se sobrescribirán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Data.Entity;
using System.Data.Entity.Infrastructure;
using System.Data.Entity.Core.Objects;
using System.Linq;

public partial class Entidades : DbContext
{
    public Entidades()
        : base("name=Entidades")
    {
    }

    protected override void OnModelCreating(DbModelBuilder modelBuilder)
    {
        throw new UnintentionalCodeFirstException();
    }

    public virtual DbSet<ANEXOS> ANEXOS { get; set; }
    public virtual DbSet<DEPENDENCIA> DEPENDENCIA { get; set; }
    public virtual DbSet<LOGS_RADICACION> LOGS_RADICACION { get; set; }
    public virtual DbSet<RADICACIONES> RADICACIONES { get; set; }
    public virtual DbSet<sysdiagrams> sysdiagrams { get; set; }
    public virtual DbSet<TIPO_ACCESO> TIPO_ACCESO { get; set; }
    public virtual DbSet<TIPO_DOCUMENTOS> TIPO_DOCUMENTOS { get; set; }
    public virtual DbSet<USUARIO_EXTERNO> USUARIO_EXTERNO { get; set; }
    public virtual DbSet<USUARIOS> USUARIOS { get; set; }
    public virtual DbSet<VISTA_RADICACIONES> VISTA_RADICACIONES { get; set; }

    public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
    {
        var diagramnameParameter = diagramname != null ?
            new ObjectParameter("diagramname", diagramname) :
            new ObjectParameter("diagramname", typeof(string));

        var owner_idParameter = owner_id.HasValue ?
            new ObjectParameter("owner_id", owner_id) :
            new ObjectParameter("owner_id", typeof(int));

        var versionParameter = version.HasValue ?
            new ObjectParameter("version", version) :
            new ObjectParameter("version", typeof(int));

        var definitionParameter = definition != null ?
            new ObjectParameter("definition", definition) :
            new ObjectParameter("definition", typeof(byte[]));

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
    }

    public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
    {
        var diagramnameParameter = diagramname != null ?
            new ObjectParameter("diagramname", diagramname) :
            new ObjectParameter("diagramname", typeof(string));

        var owner_idParameter = owner_id.HasValue ?
            new ObjectParameter("owner_id", owner_id) :
            new ObjectParameter("owner_id", typeof(int));

        var versionParameter = version.HasValue ?
            new ObjectParameter("version", version) :
            new ObjectParameter("version", typeof(int));

        var definitionParameter = definition != null ?
            new ObjectParameter("definition", definition) :
            new ObjectParameter("definition", typeof(byte[]));

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
    }

    public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
    {
        var diagramnameParameter = diagramname != null ?
            new ObjectParameter("diagramname", diagramname) :
            new ObjectParameter("diagramname", typeof(string));

        var owner_idParameter = owner_id.HasValue ?
            new ObjectParameter("owner_id", owner_id) :
            new ObjectParameter("owner_id", typeof(int));

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
    }

    public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
    {
        var diagramnameParameter = diagramname != null ?
            new ObjectParameter("diagramname", diagramname) :
            new ObjectParameter("diagramname", typeof(string));

        var owner_idParameter = owner_id.HasValue ?
            new ObjectParameter("owner_id", owner_id) :
            new ObjectParameter("owner_id", typeof(int));

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
    }

    public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
    {
        var diagramnameParameter = diagramname != null ?
            new ObjectParameter("diagramname", diagramname) :
            new ObjectParameter("diagramname", typeof(string));

        var owner_idParameter = owner_id.HasValue ?
            new ObjectParameter("owner_id", owner_id) :
            new ObjectParameter("owner_id", typeof(int));

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
    }

    public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
    {
        var diagramnameParameter = diagramname != null ?
            new ObjectParameter("diagramname", diagramname) :
            new ObjectParameter("diagramname", typeof(string));

        var owner_idParameter = owner_id.HasValue ?
            new ObjectParameter("owner_id", owner_id) :
            new ObjectParameter("owner_id", typeof(int));

        var new_diagramnameParameter = new_diagramname != null ?
            new ObjectParameter("new_diagramname", new_diagramname) :
            new ObjectParameter("new_diagramname", typeof(string));

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
    }

    public virtual int sp_upgraddiagrams()
    {
        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
    }

    public virtual ObjectResult<spBuscarNombre_Result> spBuscarNombre(string nOMBRE)
    {
        var nOMBREParameter = nOMBRE != null ?
            new ObjectParameter("NOMBRE", nOMBRE) :
            new ObjectParameter("NOMBRE", typeof(string));

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spBuscarNombre_Result>("spBuscarNombre", nOMBREParameter);
    }

    public virtual int spRadicacionDelete(Nullable<int> idRadicacion)
    {
        var idRadicacionParameter = idRadicacion.HasValue ?
            new ObjectParameter("idRadicacion", idRadicacion) :
            new ObjectParameter("idRadicacion", typeof(int));

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spRadicacionDelete", idRadicacionParameter);
    }

    public virtual int spRadicacionInsert(string asunto, Nullable<System.DateTime> fecha, Nullable<int> folios, Nullable<int> idUsuario, Nullable<int> idUsuarioExt, Nullable<int> idAnexo, Nullable<int> idDependencia, Nullable<int> idTipoDoc)
    {
        var asuntoParameter = asunto != null ?
            new ObjectParameter("asunto", asunto) :
            new ObjectParameter("asunto", typeof(string));

        var fechaParameter = fecha.HasValue ?
            new ObjectParameter("fecha", fecha) :
            new ObjectParameter("fecha", typeof(System.DateTime));

        var foliosParameter = folios.HasValue ?
            new ObjectParameter("folios", folios) :
            new ObjectParameter("folios", typeof(int));

        var idUsuarioParameter = idUsuario.HasValue ?
            new ObjectParameter("idUsuario", idUsuario) :
            new ObjectParameter("idUsuario", typeof(int));

        var idUsuarioExtParameter = idUsuarioExt.HasValue ?
            new ObjectParameter("idUsuarioExt", idUsuarioExt) :
            new ObjectParameter("idUsuarioExt", typeof(int));

        var idAnexoParameter = idAnexo.HasValue ?
            new ObjectParameter("idAnexo", idAnexo) :
            new ObjectParameter("idAnexo", typeof(int));

        var idDependenciaParameter = idDependencia.HasValue ?
            new ObjectParameter("idDependencia", idDependencia) :
            new ObjectParameter("idDependencia", typeof(int));

        var idTipoDocParameter = idTipoDoc.HasValue ?
            new ObjectParameter("idTipoDoc", idTipoDoc) :
            new ObjectParameter("idTipoDoc", typeof(int));

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spRadicacionInsert", asuntoParameter, fechaParameter, foliosParameter, idUsuarioParameter, idUsuarioExtParameter, idAnexoParameter, idDependenciaParameter, idTipoDocParameter);
    }

    public virtual ObjectResult<spRadicacionList_Result> spRadicacionList()
    {
        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spRadicacionList_Result>("spRadicacionList");
    }

    public virtual int spRadicacionUpdate(Nullable<int> idRadicacion, string asunto, Nullable<System.DateTime> fecha, Nullable<int> folios, Nullable<int> idUsuario, Nullable<int> idUsuarioExt, Nullable<int> idAnexo, Nullable<int> idDependencia, Nullable<int> idTipoDoc)
    {
        var idRadicacionParameter = idRadicacion.HasValue ?
            new ObjectParameter("idRadicacion", idRadicacion) :
            new ObjectParameter("idRadicacion", typeof(int));

        var asuntoParameter = asunto != null ?
            new ObjectParameter("asunto", asunto) :
            new ObjectParameter("asunto", typeof(string));

        var fechaParameter = fecha.HasValue ?
            new ObjectParameter("fecha", fecha) :
            new ObjectParameter("fecha", typeof(System.DateTime));

        var foliosParameter = folios.HasValue ?
            new ObjectParameter("folios", folios) :
            new ObjectParameter("folios", typeof(int));

        var idUsuarioParameter = idUsuario.HasValue ?
            new ObjectParameter("idUsuario", idUsuario) :
            new ObjectParameter("idUsuario", typeof(int));

        var idUsuarioExtParameter = idUsuarioExt.HasValue ?
            new ObjectParameter("idUsuarioExt", idUsuarioExt) :
            new ObjectParameter("idUsuarioExt", typeof(int));

        var idAnexoParameter = idAnexo.HasValue ?
            new ObjectParameter("idAnexo", idAnexo) :
            new ObjectParameter("idAnexo", typeof(int));

        var idDependenciaParameter = idDependencia.HasValue ?
            new ObjectParameter("idDependencia", idDependencia) :
            new ObjectParameter("idDependencia", typeof(int));

        var idTipoDocParameter = idTipoDoc.HasValue ?
            new ObjectParameter("idTipoDoc", idTipoDoc) :
            new ObjectParameter("idTipoDoc", typeof(int));

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spRadicacionUpdate", idRadicacionParameter, asuntoParameter, fechaParameter, foliosParameter, idUsuarioParameter, idUsuarioExtParameter, idAnexoParameter, idDependenciaParameter, idTipoDocParameter);
    }

    public virtual int spUsuarioDelete(Nullable<int> idUsuario)
    {
        var idUsuarioParameter = idUsuario.HasValue ?
            new ObjectParameter("idUsuario", idUsuario) :
            new ObjectParameter("idUsuario", typeof(int));

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spUsuarioDelete", idUsuarioParameter);
    }

    public virtual int spUsuarioInsert(string nombre, Nullable<bool> estado, Nullable<int> idTipoAccesoFk)
    {
        var nombreParameter = nombre != null ?
            new ObjectParameter("nombre", nombre) :
            new ObjectParameter("nombre", typeof(string));

        var estadoParameter = estado.HasValue ?
            new ObjectParameter("estado", estado) :
            new ObjectParameter("estado", typeof(bool));

        var idTipoAccesoFkParameter = idTipoAccesoFk.HasValue ?
            new ObjectParameter("idTipoAccesoFk", idTipoAccesoFk) :
            new ObjectParameter("idTipoAccesoFk", typeof(int));

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spUsuarioInsert", nombreParameter, estadoParameter, idTipoAccesoFkParameter);
    }

    public virtual ObjectResult<spUsuarioList_Result> spUsuarioList()
    {
        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spUsuarioList_Result>("spUsuarioList");
    }

    public virtual ObjectResult<spUsuarioSearch_Result> spUsuarioSearch(string nombre)
    {
        var nombreParameter = nombre != null ?
            new ObjectParameter("nombre", nombre) :
            new ObjectParameter("nombre", typeof(string));

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spUsuarioSearch_Result>("spUsuarioSearch", nombreParameter);
    }

    public virtual int spUsuarioUpdate(Nullable<int> idUsuario, string nombre, Nullable<bool> estado, Nullable<int> idTipoAccesoFk)
    {
        var idUsuarioParameter = idUsuario.HasValue ?
            new ObjectParameter("idUsuario", idUsuario) :
            new ObjectParameter("idUsuario", typeof(int));

        var nombreParameter = nombre != null ?
            new ObjectParameter("nombre", nombre) :
            new ObjectParameter("nombre", typeof(string));

        var estadoParameter = estado.HasValue ?
            new ObjectParameter("estado", estado) :
            new ObjectParameter("estado", typeof(bool));

        var idTipoAccesoFkParameter = idTipoAccesoFk.HasValue ?
            new ObjectParameter("idTipoAccesoFk", idTipoAccesoFk) :
            new ObjectParameter("idTipoAccesoFk", typeof(int));

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spUsuarioUpdate", idUsuarioParameter, nombreParameter, estadoParameter, idTipoAccesoFkParameter);
    }
}
